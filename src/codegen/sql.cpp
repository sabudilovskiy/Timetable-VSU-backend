
/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */
    
#include "sql.hpp"

namespace sql{

//Generated from: src/sql/token/get_user_id_by_token.sql
const userver::storages::postgres::Query get_user_id_by_token = {
R"-(
WITH found_token 
AS 
(
    select id_user
    from timetable_vsu.token 
    WHERE id = $1 AND expire_time > $2
)
SELECT id, login, password, user_type 
from timetable_vsu."user" 
LEFT OUTER JOIN found_token ON id_user = "user".id
)-",
	userver::storages::postgres::Query::Name("get_user_id_by_token"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/token/add_token_to_user.sql
const userver::storages::postgres::Query add_token_to_user = {
R"-(
insert into timetable_vsu."token" (id_user, expire_time) values ($1, $2) RETURNING id
)-",
	userver::storages::postgres::Query::Name("add_token_to_user"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/drop_user_by_login.sql
const userver::storages::postgres::Query drop_user_by_login = {
R"-(
DELETE FROM timetable_vsu."user" WHERE login=$1;
)-",
	userver::storages::postgres::Query::Name("drop_user_by_login"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/create_teacher_request.sql
const userver::storages::postgres::Query create_teacher_request = {
R"-(
INSERT INTO timetable_vsu."teacher_requests"(id_user, description) values ($1, $2) ON CONFLICT DO NOTHING
)-",
	userver::storages::postgres::Query::Name("create_teacher_request"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/get_user_by_token.sql
const userver::storages::postgres::Query get_user_by_token = {
R"-(
WITH all_user AS 
(
    SELECT 
        u.id AS user_id,
        a.id AS admin_id,
        t.id AS token_id,
        tl.id_teacher AS teacher_id
    from timetable_vsu.token AS t
        left join timetable_vsu.user AS u on u.id = t.id_user
        left join timetable_vsu.admin AS a on u.id = a.id_user
        left join timetable_vsu.teacher_link AS tl on u.id = tl.id_user
    where t.id = $1
)
SELECT 
    user_id, 
    CASE 
        WHEN admin_id IS NOT NULL THEN 'admin'::timetable_vsu.user_type
        WHEN teacher_id IS NOT NULL THEN 'teacher'::timetable_vsu.user_type
        ELSE 'user' 
    END AS type 
FROM all_user;
)-",
	userver::storages::postgres::Query::Name("get_user_by_token"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/internal_add_user.sql
const userver::storages::postgres::Query internal_add_user = {
R"-(
insert into timetable_vsu."user"(id, login, password) values ($1, $2.login, $2.password)
)-",
	userver::storages::postgres::Query::Name("internal_add_user"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/create_admin_request.sql
const userver::storages::postgres::Query create_admin_request = {
R"-(
INSERT INTO timetable_vsu."admin_requests"(id_user, description) values ($1, $2) ON CONFLICT DO NOTHING
)-",
	userver::storages::postgres::Query::Name("create_admin_request"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/drop_user_by_id.sql
const userver::storages::postgres::Query drop_user_by_id = {
R"-(
DELETE FROM timetable_vsu."user" WHERE id=$1;
)-",
	userver::storages::postgres::Query::Name("drop_user_by_id"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/add_user.sql
const userver::storages::postgres::Query add_user = {
R"-(
insert into timetable_vsu."user"
           (   login,    password) 
    values ($1.login, $1.password) 
ON CONFLICT DO NOTHING 
RETURNING id
)-",
	userver::storages::postgres::Query::Name("add_user"),
	userver::storages::postgres::Query::LogMode::kFull
};

//Generated from: src/sql/user/get_user_by_credentials.sql
const userver::storages::postgres::Query get_user_by_credentials = {
R"-(
WITH all_user AS 
( 
    SELECT 
        u.id AS user_id,
        a.id AS admin_id,
        tl.id_teacher AS teacher_id
    from 
        timetable_vsu.user AS u
        left join timetable_vsu.admin AS a on u.id = a.id_user
        left join timetable_vsu.teacher_link AS tl on u.id = tl.id_user
    where u.login = $1.login and u."password" = $1.password
)
SELECT 
    user_id, 
    CASE 
        WHEN admin_id IS NOT NULL THEN 'admin'::timetable_vsu.user_type
        WHEN teacher_id IS NOT NULL THEN 'teacher'::timetable_vsu.user_type
        ELSE 'user' 
    END AS type 
FROM all_user;
)-",
	userver::storages::postgres::Query::Name("get_user_by_credentials"),
	userver::storages::postgres::Query::LogMode::kFull
};

}
